{"version":3,"sources":["serviceWorker.js","components/Markdown.js","components/Main.js","index.js"],"names":["Boolean","window","location","hostname","match","Remarkable","require","defaultValue","Markdown","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createMarkup","__html","render","state","value","updateValue","bind","assertThisInitialized","event","setState","target","console","log","react_default","a","createElement","className","id","onChange","dangerouslySetInnerHTML","Component","Main","components_Markdown","ReactDOM","components_Main","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8GChBAC,EAAaC,EAAQ,IAErBC,EACJ,kTAwCaC,cArCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAeRQ,aAAe,WAEb,MAAO,CAAEC,QADA,IAAIb,GACOc,OAAOT,EAAKU,MAAMC,SAhBtCX,EAAKU,MAAQ,CACXC,MAAOd,GAGTG,EAAKY,YAAcZ,EAAKY,YAAYC,KAAjBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KANFA,2EASPe,GACVZ,KAAKa,SAAS,CACZL,MAAOI,EAAME,OAAON,QAEtBO,QAAQC,IAAI,gDASZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YACEE,GAAG,SACH3B,aAAcM,KAAKO,MAAMC,MACzBc,SAAUtB,KAAKS,eAGnBQ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UAAUE,wBAAyBvB,KAAKI,yBAhCjCoB,aCIRC,EARF,WACX,OACER,EAAAC,EAAAC,cAAA,OAAKE,GAAG,QACNJ,EAAAC,EAAAC,cAACO,EAAD,cCCNC,IAASrB,OAAOW,EAAAC,EAAAC,cAACS,EAAD,MAAUC,SAASC,eAAe,SH0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0068d0c5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\n\nconst Remarkable = require(\"remarkable\");\n\nconst defaultValue =\n  \"# Main Header \\n\\n## sub header \\n\\n[link to my portfolio](https://matthewmcintyre.me)\\n\\nInline `code`\\n\\n```\\nblock of code\\n```\\n list\\n1. first\\n2. second\\n3. third\\n\\nblockquotes\\n> can\\n>> be\\n>>> nested\\n\\n![react image](https://octodex.github.com/images/daftpunktocat-guy.gif)\\n\\n**bolded text**\";\n\nclass Markdown extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: defaultValue\n    };\n\n    this.updateValue = this.updateValue.bind(this);\n  }\n\n  updateValue(event) {\n    this.setState({\n      value: event.target.value\n    });\n    console.log(\"updated to \");\n  }\n\n  createMarkup = () => {\n    let md = new Remarkable();\n    return { __html: md.render(this.state.value) };\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div>\n          <textarea\n            id=\"editor\"\n            defaultValue={this.state.value}\n            onChange={this.updateValue}\n          />\n        </div>\n        <div id=\"preview\" dangerouslySetInnerHTML={this.createMarkup()} />\n      </div>\n    );\n  }\n}\n\nexport default Markdown;\n","import React from \"react\";\nimport Markdown from \"./Markdown\";\n\nconst Main = () => {\n  return (\n    <div id=\"main\">\n      <Markdown />\n    </div>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Main from \"./components/Main\";\nimport \"./components/Markdown.css\";\n\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}